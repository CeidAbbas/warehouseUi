{"version":3,"file":"utils.service.d.ts","sources":["utils.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ECalendarValue } from '../../types/calendar-value-enum';\nimport { SingleCalendarValue } from '../../types/single-calendar-value';\nimport { Moment, unitOfTime } from 'jalali-moment';\nimport { CalendarValue } from '../../types/calendar-value';\nimport { IDate } from '../../models/date.model';\nimport { CalendarMode } from '../../types/calendar-mode';\nimport { DateValidator } from '../../types/validator.type';\nimport { ICalendarInternal } from '../../models/calendar.model';\nexport interface DateLimits {\n    minDate?: SingleCalendarValue;\n    maxDate?: SingleCalendarValue;\n    minTime?: SingleCalendarValue;\n    maxTime?: SingleCalendarValue;\n}\nexport declare class UtilsService {\n    static debounce(func: Function, wait: number): () => void;\n    createArray(size: number): number[];\n    convertToMoment(date: SingleCalendarValue, format: string, locale?: string): Moment;\n    isDateValid(date: string, format: string, locale?: string): boolean;\n    getDefaultDisplayDate(current: Moment, selected: Moment[], allowMultiSelect: boolean, minDate: Moment, locale: string): Moment;\n    getInputType(value: CalendarValue, allowMultiSelect: boolean): ECalendarValue;\n    convertToMomentArray(value: CalendarValue, format: string, allowMultiSelect: boolean, locale: string): Moment[];\n    convertFromMomentArray(format: string, value: Moment[], convertTo: ECalendarValue, locale: string): CalendarValue;\n    convertToString(value: CalendarValue, format: string, locale?: string): string;\n    clearUndefined<T>(obj: T): T;\n    updateSelected(isMultiple: boolean, currentlySelected: Moment[], date: IDate, granularity?: unitOfTime.Base): Moment[];\n    closestParent(element: HTMLElement, selector: string): HTMLElement;\n    onlyTime(m: Moment): Moment;\n    granularityFromType(calendarType: CalendarMode): unitOfTime.Base;\n    createValidator({minDate, maxDate, minTime, maxTime}: DateLimits, format: string, calendarType: CalendarMode, locale: string): DateValidator;\n    datesStringToStringArray(value: string): string[];\n    getValidMomentArray(value: string, format: string, locale: string): Moment[];\n    shouldShowCurrent(showGoToCurrent: boolean, mode: CalendarMode, min: Moment, max: Moment): boolean;\n    isDateInRange(date: Moment, from: Moment, to: Moment): boolean;\n    convertPropsToMoment(obj: {\n        [key: string]: any;\n    }, format: string, props: string[], locale?: string): void;\n    shouldResetCurrentView<T extends ICalendarInternal>(prevConf: T, currentConf: T): boolean;\n    getNativeElement(elem: HTMLElement | string): HTMLElement;\n}\n"]}