import moment from 'moment-jalaali';
import { filter } from 'rxjs';
import * as i0 from '@angular/core';
import { Pipe, EventEmitter, Component, ContentChild, Input, Output, HostListener, NgModule } from '@angular/core';
import { FormControlDirective, FormControlName } from '@angular/forms';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class MonthPipe {
    constructor() {
        this.months = [
            'فروردین',
            'اردیبهشت',
            'خرداد',
            'تیر',
            'مرداد',
            'شهریور',
            'مهر',
            'آبان',
            'آذر',
            'دی',
            'بهمن',
            'اسفند',
        ];
    }
    transform(index) {
        return this.months[index];
    }
}
MonthPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: MonthPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
MonthPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: MonthPipe, name: "month" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: MonthPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'month'
                }]
        }] });

class NgPersianDatepickerComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.dateValue = 0;
        this.preventClose = false;
        this.uiYearView = true;
        this.uiMonthView = true;
        this.wasInsideClick = false;
        this.viewDateTitle = '';
        this.viewModes = [];
        this.viewModeIndex = 0;
        this.weekDays = [];
        this.years = [];
        this.months = [];
        this.days = [];
        this.hour = 0;
        this.minute = 0;
        this.second = 0;
        /** @Input */
        // date
        this.dateInitValue = true;
        this.dateIsGregorian = false;
        this.dateFormat = 'jYYYY-jMM-jDD HH:mm:ss';
        this.dateGregorianFormat = 'YYYY-MM-DD HH:mm:ss';
        this.dateMin = null;
        this.dateMax = null;
        // time
        this.timeEnable = true;
        this.timeShowSecond = true;
        this.timeMeridian = false;
        // ui
        this.uiTheme = 'default';
        this.uiIsVisible = false;
        this.uiHideOnOutsideClick = true;
        this.uiHideAfterSelectDate = true;
        this.uiInitViewMode = 'day';
        this.uiTodayBtnEnable = true;
        /** @Output */
        // date
        this.dateOnInit = new EventEmitter();
        this.dateOnSelect = new EventEmitter();
        // ui
        this.uiIsVisibleChange = new EventEmitter();
        moment.loadPersian({
            usePersianDigits: false,
            dialect: 'persian-modern'
        });
        this.setToday();
        this.setWeekDays();
    }
    /** @ReactiveForm */
    set _formControlDirective(value) {
        this.setFormControl(value?.control);
    }
    set _formControlName(value) {
        this.setFormControl(value?.control);
    }
    set _timeEnable(value) {
        this.timeEnable = value;
        this.setTime();
        this.scrollIntoActiveTime();
    }
    set _timeShowSecond(value) {
        this.timeShowSecond = value;
        this.scrollIntoActiveTime();
    }
    set _timeMeridian(value) {
        this.timeMeridian = value;
        this.scrollIntoActiveTime();
    }
    set _uiYearView(value) {
        this.uiYearView = value;
        this.checkViewModes();
        this.setViewDateTitle();
    }
    set _uiMonthView(value) {
        this.uiMonthView = value;
        this.checkViewModes();
        this.setViewDateTitle();
    }
    ngOnInit() {
        this.setViewModes();
        this.setInitViewMode();
        this.setShowOnInputFocus();
    }
    ngOnDestroy() {
        this.formControlValueChanges?.unsubscribe();
        if (this.input) {
            this.input.removeEventListener('focus', this.inputEventFocusListener);
        }
    }
    setFormControl(value) {
        if (!value)
            return;
        this.formControl = value;
        if (!this.dateValue) {
            this.setDateInitValue(this.formControl?.value);
            this.setSelectedDate(this.formControl?.value);
            this.setViewDate();
            this.setTime();
            this.setFormControlValue();
        }
        this.formControlValueChanges?.unsubscribe();
        this.formControlValueChanges = this.formControl
            ?.valueChanges
            ?.pipe(filter((date) => !!date && this.valueOfDate(date) !== this.dateValue))
            ?.subscribe({
            next: (value) => {
                const date = moment(value, this.dateFormat);
                if (!date.isValid() || !this.isDateInRange(date.valueOf(), false, false)) {
                    return;
                }
                this.setTime(date);
                this.changeSelectedDate(date, false);
                this.scrollIntoActiveTime();
            }
        });
    }
    setToday() {
        const today = moment();
        if (!this.timeEnable)
            today.startOf('day');
        this.today = today;
    }
    setWeekDays() {
        this.weekDays = moment.weekdaysMin();
        this.weekDays.unshift(this.weekDays.pop());
    }
    setViewModes() {
        this.viewModes = ['day'];
        if (this.uiMonthView) {
            this.viewModes.push('month');
        }
        if (this.uiYearView) {
            this.viewModes.push('year');
        }
        if (this.viewModes.length <= this.viewModeIndex) {
            this.viewModeIndex = 0;
        }
    }
    setInitViewMode() {
        const index = this.viewModes.indexOf(this.uiInitViewMode);
        if (index !== -1)
            this.viewModeIndex = index;
    }
    checkViewModes() {
        let viewModesCount = 1;
        if (this.uiYearView) {
            viewModesCount++;
        }
        if (this.uiMonthView) {
            viewModesCount++;
        }
        if (viewModesCount !== this.viewModes.length) {
            this.setViewModes();
        }
    }
    setDateInitValue(dateValue) {
        if (dateValue || !this.dateInitValue) {
            return;
        }
        this.dateValue = this.today.valueOf();
        this.selectedDate = moment(this.dateValue);
        this.dateOnInit.next({
            shamsi: String(this.selectedDate.format(this.dateFormat)),
            gregorian: String(this.selectedDate.format(this.dateGregorianFormat)),
            timestamp: Number(this.selectedDate.valueOf())
        });
    }
    setSelectedDate(dateValue) {
        if (!dateValue) {
            return;
        }
        const date = moment(this.valueOfDate(dateValue));
        if (!this.timeEnable)
            date.startOf('day');
        this.dateValue = date.valueOf();
        this.selectedDate = date;
    }
    setViewDate() {
        if (!this.dateValue) {
            this.viewDate = this.dateMax ? moment(this.dateMax).endOf('jYear') : moment(this.today);
        }
        else {
            this.viewDate = this.dateMax && this.selectedDate.valueOf() > this.dateMax.valueOf() ?
                moment(this.dateMax) : moment(this.selectedDate);
        }
        if (!this.timeEnable)
            this.viewDate.startOf('day');
        this.onChangeViewDate();
    }
    onChangeViewDate() {
        this.viewDate.startOf('jMonth');
        this.setYears();
        this.setMonths();
        this.setDays();
        this.setViewDateTitle();
    }
    setYears() {
        this.years = [];
        const years = moment(this.viewDate);
        years.startOf('jYear');
        years.add(-6, 'jYear');
        for (let i = 0; i < 12; i++) {
            const year = [years.valueOf(), years.jYear()];
            this.years.push({
                timestamp: year[0],
                value: year[1],
                isYearOfTodayDate: this.isYearOfTodayDate(year),
                isYearOfSelectedDate: this.isYearOfSelectedDate(year),
                isYearDisabled: this.isYearDisabled(year)
            });
            years.add(1, 'jYear');
        }
    }
    setMonths() {
        this.months = [];
        const months = moment(this.viewDate);
        months.startOf('jYear');
        for (let i = 0; i < 12; i++) {
            const month = [months.valueOf(), months.jYear(), months.jMonth()];
            this.months.push({
                timestamp: month[0],
                year: month[1],
                indexValue: month[2],
                isMonthOfTodayDate: this.isMonthOfToday(month),
                isMonthOfSelectedDate: this.isMonthOfSelectedDate(month),
                isMonthDisabled: this.isMonthDisabled(month)
            });
            months.add(1, 'jMonth');
        }
    }
    setDays() {
        this.days = [];
        const prevMonthDetails = [];
        const currentMonthDetails = [];
        const nextMonthDetails = [];
        const prevMonth = moment(this.viewDate);
        const currentMonth = moment(this.viewDate);
        const nextMonth = moment(this.viewDate);
        prevMonth.add(-1, 'jMonth');
        nextMonth.add(1, 'jMonth');
        const currentMonthDays = moment.jDaysInMonth(currentMonth.jYear(), currentMonth.jMonth());
        const prevMonthDays = moment.jDaysInMonth(prevMonth.jYear(), prevMonth.jMonth());
        const nextMonthDays = moment.jDaysInMonth(nextMonth.jYear(), nextMonth.jMonth());
        for (let i = 0; i < prevMonthDays; i++) {
            prevMonthDetails.push([prevMonth.valueOf(), prevMonth.jYear(), prevMonth.jMonth(), prevMonth.jDate()]);
            prevMonth.add(1, 'day');
        }
        for (let i = 0; i < currentMonthDays; i++) {
            currentMonthDetails.push([currentMonth.valueOf(), currentMonth.jYear(), currentMonth.jMonth(), currentMonth.jDate()]);
            currentMonth.add(1, 'day');
        }
        for (let i = 0; i < nextMonthDays; i++) {
            nextMonthDetails.push([nextMonth.valueOf(), nextMonth.jYear(), nextMonth.jMonth(), nextMonth.jDate()]);
            nextMonth.add(1, 'day');
        }
        for (let row = 0; row < 6; row++) {
            const rowValue = [];
            for (let col = 0; col < 7; col++) {
                const fromPrevMonth = (this.viewDate.day() === 6) ? 0 : (this.viewDate.day() + 1);
                let index = ((row * 7) + col) - fromPrevMonth;
                let day = [];
                if (index < 0) {
                    index = prevMonthDetails.length - (fromPrevMonth - col);
                    day = prevMonthDetails[index];
                }
                else if (index >= currentMonthDetails.length) {
                    index = index - currentMonthDetails.length;
                    day = nextMonthDetails[index];
                }
                else {
                    day = currentMonthDetails[index];
                }
                rowValue.push({
                    timestamp: day[0],
                    year: day[1],
                    monthIndex: day[2],
                    value: day[3],
                    isDayInCurrentMonth: this.isDayInCurrentMonth(day),
                    isDayOfTodayDate: this.isDayOfTodayDate(day),
                    isDayOfSelectedDate: this.isDayOfSelectedDate(day),
                    isDayDisabled: this.isDayDisabled(day)
                });
            }
            this.days.push(rowValue);
        }
    }
    setViewDateTitle() {
        const year = this.viewDate ? this.viewDate.jYear() : 0;
        if (!year) {
            return;
        }
        switch (this.viewModes[this.viewModeIndex]) {
            case 'day':
                this.viewDateTitle = this.viewDate.format('jMMMM') + ' ' + year.toString();
                break;
            case 'month':
                this.viewDateTitle = year.toString();
                break;
            case 'year':
                this.viewDateTitle = (year - 6).toString() + '-' + (year + 5).toString();
                break;
        }
    }
    setTime(date = null) {
        if (date) {
            this.hour = date.hour();
            this.minute = date.minute();
            this.second = date.second();
        }
        else if (this.selectedDate) {
            this.hour = this.selectedDate.hour();
            this.minute = this.selectedDate.minute();
            this.second = this.selectedDate.second();
        }
        else {
            this.hour = this.today.hour();
            this.minute = this.today.minute();
            this.second = this.today.second();
        }
    }
    setFormControlValue() {
        if (!this.formControl) {
            return;
        }
        if (this.dateValue) {
            this.formControl?.setValue(moment(this.dateValue).format(this.dateFormat));
        }
    }
    setShowOnInputFocus() {
        const input = this.elementRef.nativeElement.querySelector('input');
        if (!input) {
            return;
        }
        this.inputEventFocusListener = () => {
            if (!this.uiIsVisible) {
                this.setUiIsVisible(true);
            }
        };
        this.input = input;
        this.input.addEventListener('focus', this.inputEventFocusListener);
    }
    skipViewDate(skip, type) {
        if (type === 1) {
            this.viewDate.add(skip, 'jYear');
        }
        else if (type === 2) {
            this.viewDate.add(skip, 'jMonth');
        }
    }
    navigate(forward) {
        let skip = 1;
        if (!forward) {
            skip = skip * -1;
        }
        switch (this.viewModes[this.viewModeIndex]) {
            case 'day':
                this.skipViewDate(skip, 2);
                break;
            case 'month':
                this.skipViewDate(skip, 1);
                break;
            case 'year':
                this.skipViewDate((skip * 12), 1);
                break;
        }
        this.onChangeViewDate();
    }
    nextViewMode() {
        if (this.viewModes.length === 1) {
            return;
        }
        if (this.viewModes.length <= (this.viewModeIndex + 1)) {
            this.viewModeIndex = 0;
        }
        else {
            this.viewModeIndex++;
        }
        this.setViewDateTitle();
    }
    selectToday() {
        this.setToday();
        this.preventClose = true;
        this.changeSelectedDate(this.today);
    }
    yearClick(year) {
        if (year.isYearDisabled) {
            return;
        }
        this.viewDate = moment(year.timestamp);
        let viewModeIndex = this.viewModes.indexOf('month');
        if (viewModeIndex === -1) {
            viewModeIndex = this.viewModes.indexOf('day');
        }
        this.viewModeIndex = viewModeIndex;
        this.onChangeViewDate();
    }
    monthClick(month) {
        if (month.isMonthDisabled) {
            return;
        }
        this.viewDate = moment(month.timestamp);
        this.viewModeIndex = this.viewModes.indexOf('day');
        this.onChangeViewDate();
    }
    dayClick(day) {
        if (day.isDayDisabled) {
            return;
        }
        this.changeSelectedDate(moment(day.timestamp));
    }
    isYearOfTodayDate(year) {
        return (this.today.jYear() === year[1]);
    }
    isYearOfSelectedDate(year) {
        if (!this.selectedDate) {
            return false;
        }
        return (year[1] === this.selectedDate.jYear());
    }
    isYearDisabled(month) {
        return !this.isDateInRange(month[0], true, false);
    }
    isMonthOfToday(month) {
        return (this.today.jYear() === month[1] &&
            this.today.jMonth() === month[2]);
    }
    isMonthOfSelectedDate(month) {
        if (!this.selectedDate) {
            return false;
        }
        return (month[1] === this.selectedDate.jYear() &&
            month[2] === this.selectedDate.jMonth());
    }
    isMonthDisabled(month) {
        return !this.isDateInRange(month[0], false, true);
    }
    isDayInCurrentMonth(day) {
        return (day[1] === this.viewDate.jYear() &&
            day[2] === this.viewDate.jMonth());
    }
    isDayOfTodayDate(day) {
        return (day[1] === this.today.jYear() &&
            day[2] === this.today.jMonth() &&
            day[3] === this.today.jDate());
    }
    isDayOfSelectedDate(day) {
        if (!this.selectedDate) {
            return false;
        }
        return (day[1] === this.selectedDate.jYear() &&
            day[2] === this.selectedDate.jMonth() &&
            day[3] === this.selectedDate.jDate());
    }
    isDayDisabled(day) {
        return !this.isDateInRange(day[0], false, false);
    }
    isDateInRange(date, isYear, isMonth) {
        const result = [];
        if (this.dateMin) {
            const min = moment(this.dateMin);
            if (isYear) {
                min.startOf('jYear');
            }
            if (isMonth) {
                min.startOf('jMonth');
            }
            result.push(min.valueOf() <= date);
        }
        if (this.dateMax) {
            const max = moment(this.dateMax);
            if (isYear) {
                max.startOf('jYear');
            }
            if (isMonth) {
                max.startOf('jMonth');
            }
            result.push(max.valueOf() >= date);
        }
        return !(result.indexOf(false) !== -1);
    }
    changeSelectedDate(date, setInputValue = true) {
        this.selectedDate = moment(date);
        this.onChangeSelectedDate(setInputValue);
    }
    onChangeSelectedDate(setInputValue) {
        if (this.timeEnable) {
            this.selectedDate.hour(this.hour);
            this.selectedDate.minute(this.minute);
            this.selectedDate.second(this.second);
            this.selectedDate.millisecond(0);
        }
        else {
            this.setToday();
            this.selectedDate.hour(this.today.hour());
            this.selectedDate.minute(this.today.minute());
            this.selectedDate.second(this.today.second());
            this.selectedDate.millisecond(this.today.millisecond());
        }
        this.dateValue = this.selectedDate.valueOf();
        if (this.uiHideAfterSelectDate && !this.preventClose) {
            this.setUiIsVisible(false);
        }
        else {
            this.preventClose = false;
        }
        if (setInputValue) {
            this.setFormControlValue();
        }
        this.setViewDate();
        this.dateOnSelect.next({
            shamsi: String(this.selectedDate.format(this.dateFormat)),
            gregorian: String(this.selectedDate.format(this.dateGregorianFormat)),
            timestamp: Number(this.selectedDate.valueOf())
        });
    }
    set12Hour(value) {
        let hour = value;
        const isAM = this.hour < 12;
        const isPM = this.hour >= 12;
        if (isAM && hour === 12) {
            hour = 0;
        }
        if (isPM && hour === 12) {
            hour = 12;
        }
        if (isPM && hour < 12) {
            hour = value + 12;
        }
        this.setHour(hour);
    }
    setHour(value) {
        if (value === this.hour) {
            return;
        }
        this.hour = value;
        this.onTimeChange();
    }
    setMinute(value) {
        if (value === this.minute) {
            return;
        }
        this.minute = value;
        this.onTimeChange();
    }
    setSecond(value) {
        if (value === this.second) {
            return;
        }
        this.second = value;
        this.onTimeChange();
    }
    toggleAmPm(current) {
        if ((current === 'AM' && this.hour < 12) || (current === 'PM' && this.hour >= 12)) {
            return;
        }
        if (this.hour < 12) {
            this.hour += 12;
        }
        else {
            this.hour -= 12;
        }
        this.onTimeChange();
    }
    onTimeChange() {
        this.preventClose = true;
        this.changeSelectedDate(this.selectedDate);
    }
    scrollIntoActiveTime() {
        if (!this.uiIsVisible || !this.timeEnable) {
            return;
        }
        setTimeout(() => {
            const datePicker = this.elementRef.nativeElement;
            // Hour
            const activeHour = datePicker.querySelector('.time-col.hour-col .dp-btn.selected');
            if (activeHour)
                activeHour.scrollIntoView({ block: 'center' });
            // Minute
            const activeMinute = datePicker.querySelector('.time-col.minute-col .dp-btn.selected');
            if (activeMinute)
                activeMinute.scrollIntoView({ block: 'center' });
            // Second
            const activeSecond = datePicker.querySelector('.time-col.second-col .dp-btn.selected');
            if (activeSecond)
                activeSecond.scrollIntoView({ block: 'center' });
        }, 10);
    }
    onInsideClick() {
        this.wasInsideClick = true;
    }
    onOutsideClick() {
        const wasInsideClick = Boolean(this.wasInsideClick);
        this.wasInsideClick = false;
        if (wasInsideClick || !this.uiHideOnOutsideClick) {
            return;
        }
        this.setUiIsVisible(false);
    }
    valueOfDate(date) {
        if (typeof date === 'string') {
            return (this.dateIsGregorian && !this.dateValue) ?
                moment(date, this.dateGregorianFormat).valueOf() :
                moment(date, this.dateFormat).valueOf();
        }
        return date;
    }
    setUiIsVisible(value) {
        this.uiIsVisible = value;
        this.uiIsVisibleChange.next(value);
        this.scrollIntoActiveTime();
    }
}
NgPersianDatepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NgPersianDatepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: NgPersianDatepickerComponent, selector: "ng-persian-datepicker", inputs: { dateInitValue: "dateInitValue", dateIsGregorian: "dateIsGregorian", dateFormat: "dateFormat", dateGregorianFormat: "dateGregorianFormat", dateMin: "dateMin", dateMax: "dateMax", _timeEnable: ["timeEnable", "_timeEnable"], _timeShowSecond: ["timeShowSecond", "_timeShowSecond"], _timeMeridian: ["timeMeridian", "_timeMeridian"], uiTheme: "uiTheme", uiIsVisible: "uiIsVisible", uiHideOnOutsideClick: "uiHideOnOutsideClick", uiHideAfterSelectDate: "uiHideAfterSelectDate", _uiYearView: ["uiYearView", "_uiYearView"], _uiMonthView: ["uiMonthView", "_uiMonthView"], uiInitViewMode: "uiInitViewMode", uiTodayBtnEnable: "uiTodayBtnEnable" }, outputs: { dateOnInit: "dateOnInit", dateOnSelect: "dateOnSelect", uiIsVisibleChange: "uiIsVisibleChange" }, host: { listeners: { "click": "onInsideClick()", "document:click": "onOutsideClick()" } }, queries: [{ propertyName: "_formControlDirective", first: true, predicate: FormControlDirective, descendants: true }, { propertyName: "_formControlName", first: true, predicate: FormControlName, descendants: true }], ngImport: i0, template: "<div class=\"datepicker-content\">\n  <ng-content></ng-content>\n  <div class=\"datepicker-outer-container\"\n       [class.theme-default]=\"uiTheme === 'default'\"\n       [class.theme-blue]=\"uiTheme === 'blue'\"\n       [class.theme-gray]=\"uiTheme === 'gray'\"\n       [class.theme-dark]=\"uiTheme === 'dark'\"\n       [class.theme-black]=\"uiTheme === 'black'\"\n       [class.hide]=\"!uiIsVisible\">\n    <div class=\"datepicker-inner-container\">\n\n      <!-- Start: navigation -->\n      <div class=\"content-container navigation-container horizontal-padding\">\n        <div class=\"go-back dp-btn\"\n             (click)=\"navigate(false)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\">\n            <path d=\"M183.189,111.816L74.892,3.555c-4.752-4.74-12.451-4.74-17.215,0c-4.752,4.74-4.752,12.439,0,17.179\n                   l99.707,99.671l-99.695,99.671c-4.752,4.74-4.752,12.439,0,17.191c4.752,4.74,12.463,4.74,17.215,0l108.297-108.261\n                   C187.881,124.315,187.881,116.495,183.189,111.816z\"></path>\n          </svg>\n        </div>\n        <div class=\"switch-view dp-btn\"\n             (click)=\"nextViewMode()\">\n          <span>{{ viewDateTitle }}</span>\n        </div>\n        <div class=\"go-forward dp-btn\"\n             (click)=\"navigate(true)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\">\n            <path d=\"M57.633,129.007L165.93,237.268c4.752,4.74,12.451,4.74,17.215,0c4.752-4.74,4.752-12.439,0-17.179\n                   l-99.707-99.671l99.695-99.671c4.752-4.74,4.752-12.439,0-17.191c-4.752-4.74-12.463-4.74-17.215,0L57.621,111.816\n                   C52.942,116.507,52.942,124.327,57.633,129.007z\"></path>\n          </svg>\n        </div>\n      </div>\n      <!-- End: navigation -->\n\n      <!-- Start: year view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'year'\"\n           class=\"years-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"year-col three-col-per-row\"\n               (click)=\"yearClick(year)\"\n               *ngFor=\"let year of years\">\n            <div class=\"dp-btn\"\n                 [class.today]=\"year.isYearOfTodayDate\"\n                 [class.selected]=\"year.isYearOfSelectedDate\"\n                 [class.disabled]=\"year.isYearDisabled\">\n              <span>{{ year.value }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: year view mode -->\n\n      <!-- Start: month view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'month'\"\n           class=\"months-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"month-col three-col-per-row\"\n               (click)=\"monthClick(month)\"\n               *ngFor=\"let month of months\">\n            <div class=\"dp-btn\"\n                 [class.today]=\"month.isMonthOfTodayDate\"\n                 [class.selected]=\"month.isMonthOfSelectedDate\"\n                 [class.disabled]=\"month.isMonthDisabled\">\n              <span>{{ month.indexValue | month }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: month view mode -->\n\n      <!-- Start: day view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'day'\"\n           class=\"days-container horizontal-padding\">\n        <div class=\"content-container week-days\">\n          <div class=\"day-col\"\n               *ngFor=\"let weekDay of weekDays\">\n            <span>{{ weekDay }}</span>\n          </div>\n        </div>\n        <div class=\"content-container month-days\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <ng-container *ngFor=\"let row of days\">\n            <div class=\"day-col\"\n                 (click)=\"dayClick(day)\"\n                 *ngFor=\"let day of row\">\n              <div class=\"dp-btn\"\n                   [class.other-month]=\"!day.isDayInCurrentMonth\"\n                   [class.today]=\"day.isDayOfTodayDate\"\n                   [class.selected]=\"day.isDayOfSelectedDate\"\n                   [class.disabled]=\"day.isDayDisabled\">\n                <span>{{ day.value }}</span>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- End: day view mode -->\n\n      <!-- Start: time picker -->\n      <div *ngIf=\"timeEnable\"\n           class=\"time-container horizontal-padding content-container\">\n        <div class=\"time-col hour-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <ng-container *ngIf=\"!timeMeridian\">\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(24); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setHour(i)\"\n                   [class.selected]=\"hour === i\">\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"timeMeridian\">\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(12); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"set12Hour(i + 1)\"\n                   [class.selected]=\"(hour === 0 && (i + 1) === 12) ||\n                                   (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                                   (hour > 12 && hour === ((i + 1) + 12))\">\n                <span>{{ (i + 1) | number: '2.0' }}</span>\n              </div>\n            </div>\n          </ng-container>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"time-col minute-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <div class=\"item\"\n               *ngFor=\"let _ of [].constructor(60); let i = index\">\n            <div class=\"dp-btn\"\n                 (click)=\"setMinute(i)\"\n                 [class.selected]=\"minute === i\">\n              <span>{{ i | number: '2.0' }}</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"timeShowSecond\"\n             class=\"time-col second-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <div class=\"item\"\n               *ngFor=\"let _ of [].constructor(60); let i = index\">\n            <div class=\"dp-btn\"\n                 (click)=\"setSecond(i)\"\n                 [class.selected]=\"second === i\">\n              <span>{{ i | number: '2.0' }}</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"timeMeridian\"\n             class=\"time-col meridian-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn\" (click)=\"toggleAmPm('AM')\" [class.selected]=\"hour < 12\">\n              <span>AM</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn\" (click)=\"toggleAmPm('PM')\" [class.selected]=\"hour >= 12\">\n              <span>PM</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: time picker -->\n\n      <!-- Start: toolbox -->\n      <div class=\"the-toolbox horizontal-padding\">\n        <div *ngIf=\"uiTodayBtnEnable\"\n             class=\"the-item dp-btn\"\n             (click)=\"selectToday()\">\n          <span>\u0627\u0645\u0631\u0648\u0632</span>\n        </div>\n      </div>\n      <!-- End: toolbox -->\n\n    </div>\n  </div>\n</div>\n", styles: [".datepicker-outer-container.theme-default{background:#FFFFFF;color:#333;border:1px solid #CCCCCC}.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-back svg path{fill:#333}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#007BE6;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.today{background:#333333;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.selected{background:#005299;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.disabled{background:#F1F1F1;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-default .datepicker-inner-container .time-container{border-top-color:#ccc;border-bottom-color:#ccc}.datepicker-outer-container.theme-blue{background:#1A3347;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#0095C6;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#1a3347}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.selected{background:#0085B2;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.disabled{background:#204b6e;color:#00aae2;cursor:not-allowed}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.other-month{color:#00aae2}.datepicker-outer-container.theme-blue .datepicker-inner-container .time-container{border-top-color:#fff;border-bottom-color:#fff}.datepicker-outer-container.theme-gray{background:#556270;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#556270}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.selected{background:#C44D58;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-gray .datepicker-inner-container .time-container{border-top-color:#fff;border-bottom-color:#fff}.datepicker-outer-container.theme-dark{background:#2D2D30;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#2d2d2d}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.selected{background:#D68E3A;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-dark .datepicker-inner-container .time-container{border-top-color:#393939;border-bottom-color:#393939}.datepicker-outer-container.theme-black{background:#222222;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#222}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.selected{background:#F26161;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-black .datepicker-inner-container .time-container{border-top-color:#393939;border-bottom-color:#393939}.datepicker-outer-container{direction:rtl;vertical-align:top;min-width:200px;font-size:12px;padding-top:8px;padding-bottom:8px;-webkit-user-select:none;user-select:none;text-align:center;border-radius:5px}.datepicker-outer-container.hide{display:none}.datepicker-outer-container.manual-position{width:100%}.datepicker-outer-container .datepicker-inner-container .horizontal-padding{padding-right:5px;padding-left:5px}.datepicker-outer-container .datepicker-inner-container .no-margin-bottom{margin-bottom:0!important}.datepicker-outer-container .datepicker-inner-container .dp-btn{border-radius:5px}.datepicker-outer-container .datepicker-inner-container .content-container{margin-bottom:8px}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{display:inline-block;vertical-align:top;height:24px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{width:15%;position:relative}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward svg,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back svg{width:12px;height:12px;position:absolute;top:calc(50% - 6px);right:calc(50% - 6px)}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{width:66%;margin:0 2%;font-weight:700}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view span{vertical-align:sub}.datepicker-outer-container .datepicker-inner-container .days-container .day-col{display:inline-block;vertical-align:top;width:14.2857142857%;padding:1px}.datepicker-outer-container .datepicker-inner-container .days-container .day-col .dp-btn{display:flex;flex-direction:column;justify-content:center;align-items:center;min-height:24px}.datepicker-outer-container .datepicker-inner-container .days-container .week-days .day-col{font-weight:700}.datepicker-outer-container .datepicker-inner-container .days-container .month-days .day-col{cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row{display:inline-block;vertical-align:top;width:33.3333333333%;padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row .dp-btn{display:flex;flex-direction:column;justify-content:center;align-content:center;min-height:36px}.datepicker-outer-container .datepicker-inner-container .time-container{border-top-width:1px;border-top-style:solid;border-bottom-width:1px;border-bottom-style:solid;height:82px;direction:ltr;display:flex;flex-direction:row;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col{flex:1;height:100%;overflow:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item{padding:1px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:first-of-type{padding-top:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:last-of-type{padding-bottom:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item .dp-btn{min-height:24px;display:flex;flex-direction:column;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col.meridian-col{display:flex;flex-direction:column;justify-content:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox{text-align:right}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item{display:inline-block;vertical-align:top;min-width:40px;cursor:pointer;font-weight:700;padding:3px 5px;margin-left:5px;text-align:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item:last-child{margin-left:0}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "month": MonthPipe, "number": i1.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-persian-datepicker', template: "<div class=\"datepicker-content\">\n  <ng-content></ng-content>\n  <div class=\"datepicker-outer-container\"\n       [class.theme-default]=\"uiTheme === 'default'\"\n       [class.theme-blue]=\"uiTheme === 'blue'\"\n       [class.theme-gray]=\"uiTheme === 'gray'\"\n       [class.theme-dark]=\"uiTheme === 'dark'\"\n       [class.theme-black]=\"uiTheme === 'black'\"\n       [class.hide]=\"!uiIsVisible\">\n    <div class=\"datepicker-inner-container\">\n\n      <!-- Start: navigation -->\n      <div class=\"content-container navigation-container horizontal-padding\">\n        <div class=\"go-back dp-btn\"\n             (click)=\"navigate(false)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\">\n            <path d=\"M183.189,111.816L74.892,3.555c-4.752-4.74-12.451-4.74-17.215,0c-4.752,4.74-4.752,12.439,0,17.179\n                   l99.707,99.671l-99.695,99.671c-4.752,4.74-4.752,12.439,0,17.191c4.752,4.74,12.463,4.74,17.215,0l108.297-108.261\n                   C187.881,124.315,187.881,116.495,183.189,111.816z\"></path>\n          </svg>\n        </div>\n        <div class=\"switch-view dp-btn\"\n             (click)=\"nextViewMode()\">\n          <span>{{ viewDateTitle }}</span>\n        </div>\n        <div class=\"go-forward dp-btn\"\n             (click)=\"navigate(true)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\">\n            <path d=\"M57.633,129.007L165.93,237.268c4.752,4.74,12.451,4.74,17.215,0c4.752-4.74,4.752-12.439,0-17.179\n                   l-99.707-99.671l99.695-99.671c4.752-4.74,4.752-12.439,0-17.191c-4.752-4.74-12.463-4.74-17.215,0L57.621,111.816\n                   C52.942,116.507,52.942,124.327,57.633,129.007z\"></path>\n          </svg>\n        </div>\n      </div>\n      <!-- End: navigation -->\n\n      <!-- Start: year view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'year'\"\n           class=\"years-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"year-col three-col-per-row\"\n               (click)=\"yearClick(year)\"\n               *ngFor=\"let year of years\">\n            <div class=\"dp-btn\"\n                 [class.today]=\"year.isYearOfTodayDate\"\n                 [class.selected]=\"year.isYearOfSelectedDate\"\n                 [class.disabled]=\"year.isYearDisabled\">\n              <span>{{ year.value }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: year view mode -->\n\n      <!-- Start: month view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'month'\"\n           class=\"months-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"month-col three-col-per-row\"\n               (click)=\"monthClick(month)\"\n               *ngFor=\"let month of months\">\n            <div class=\"dp-btn\"\n                 [class.today]=\"month.isMonthOfTodayDate\"\n                 [class.selected]=\"month.isMonthOfSelectedDate\"\n                 [class.disabled]=\"month.isMonthDisabled\">\n              <span>{{ month.indexValue | month }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: month view mode -->\n\n      <!-- Start: day view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'day'\"\n           class=\"days-container horizontal-padding\">\n        <div class=\"content-container week-days\">\n          <div class=\"day-col\"\n               *ngFor=\"let weekDay of weekDays\">\n            <span>{{ weekDay }}</span>\n          </div>\n        </div>\n        <div class=\"content-container month-days\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <ng-container *ngFor=\"let row of days\">\n            <div class=\"day-col\"\n                 (click)=\"dayClick(day)\"\n                 *ngFor=\"let day of row\">\n              <div class=\"dp-btn\"\n                   [class.other-month]=\"!day.isDayInCurrentMonth\"\n                   [class.today]=\"day.isDayOfTodayDate\"\n                   [class.selected]=\"day.isDayOfSelectedDate\"\n                   [class.disabled]=\"day.isDayDisabled\">\n                <span>{{ day.value }}</span>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- End: day view mode -->\n\n      <!-- Start: time picker -->\n      <div *ngIf=\"timeEnable\"\n           class=\"time-container horizontal-padding content-container\">\n        <div class=\"time-col hour-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <ng-container *ngIf=\"!timeMeridian\">\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(24); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setHour(i)\"\n                   [class.selected]=\"hour === i\">\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"timeMeridian\">\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(12); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"set12Hour(i + 1)\"\n                   [class.selected]=\"(hour === 0 && (i + 1) === 12) ||\n                                   (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                                   (hour > 12 && hour === ((i + 1) + 12))\">\n                <span>{{ (i + 1) | number: '2.0' }}</span>\n              </div>\n            </div>\n          </ng-container>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"time-col minute-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <div class=\"item\"\n               *ngFor=\"let _ of [].constructor(60); let i = index\">\n            <div class=\"dp-btn\"\n                 (click)=\"setMinute(i)\"\n                 [class.selected]=\"minute === i\">\n              <span>{{ i | number: '2.0' }}</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"timeShowSecond\"\n             class=\"time-col second-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n          <div class=\"item\"\n               *ngFor=\"let _ of [].constructor(60); let i = index\">\n            <div class=\"dp-btn\"\n                 (click)=\"setSecond(i)\"\n                 [class.selected]=\"second === i\">\n              <span>{{ i | number: '2.0' }}</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn disabled\">\n              <span>--</span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"timeMeridian\"\n             class=\"time-col meridian-col\">\n          <div class=\"item\">\n            <div class=\"dp-btn\" (click)=\"toggleAmPm('AM')\" [class.selected]=\"hour < 12\">\n              <span>AM</span>\n            </div>\n          </div>\n          <div class=\"item\">\n            <div class=\"dp-btn\" (click)=\"toggleAmPm('PM')\" [class.selected]=\"hour >= 12\">\n              <span>PM</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: time picker -->\n\n      <!-- Start: toolbox -->\n      <div class=\"the-toolbox horizontal-padding\">\n        <div *ngIf=\"uiTodayBtnEnable\"\n             class=\"the-item dp-btn\"\n             (click)=\"selectToday()\">\n          <span>\u0627\u0645\u0631\u0648\u0632</span>\n        </div>\n      </div>\n      <!-- End: toolbox -->\n\n    </div>\n  </div>\n</div>\n", styles: [".datepicker-outer-container.theme-default{background:#FFFFFF;color:#333;border:1px solid #CCCCCC}.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-back svg path{fill:#333}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#007BE6;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.today{background:#333333;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.selected{background:#005299;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.disabled{background:#F1F1F1;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-default .datepicker-inner-container .time-container{border-top-color:#ccc;border-bottom-color:#ccc}.datepicker-outer-container.theme-blue{background:#1A3347;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#0095C6;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#1a3347}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.selected{background:#0085B2;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.disabled{background:#204b6e;color:#00aae2;cursor:not-allowed}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.other-month{color:#00aae2}.datepicker-outer-container.theme-blue .datepicker-inner-container .time-container{border-top-color:#fff;border-bottom-color:#fff}.datepicker-outer-container.theme-gray{background:#556270;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#556270}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.selected{background:#C44D58;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-gray .datepicker-inner-container .time-container{border-top-color:#fff;border-bottom-color:#fff}.datepicker-outer-container.theme-dark{background:#2D2D30;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#2d2d2d}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.selected{background:#D68E3A;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-dark .datepicker-inner-container .time-container{border-top-color:#393939;border-bottom-color:#393939}.datepicker-outer-container.theme-black{background:#222222;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-forward svg path,.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-back svg path{fill:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover{background:#393939;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:not(.disabled):not(.selected):hover svg path{fill:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.today{background:#FFFFFF;color:#222}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.selected{background:#F26161;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.disabled{background:#393939;color:#ccc;cursor:not-allowed}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-black .datepicker-inner-container .time-container{border-top-color:#393939;border-bottom-color:#393939}.datepicker-outer-container{direction:rtl;vertical-align:top;min-width:200px;font-size:12px;padding-top:8px;padding-bottom:8px;-webkit-user-select:none;user-select:none;text-align:center;border-radius:5px}.datepicker-outer-container.hide{display:none}.datepicker-outer-container.manual-position{width:100%}.datepicker-outer-container .datepicker-inner-container .horizontal-padding{padding-right:5px;padding-left:5px}.datepicker-outer-container .datepicker-inner-container .no-margin-bottom{margin-bottom:0!important}.datepicker-outer-container .datepicker-inner-container .dp-btn{border-radius:5px}.datepicker-outer-container .datepicker-inner-container .content-container{margin-bottom:8px}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{display:inline-block;vertical-align:top;height:24px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{width:15%;position:relative}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward svg,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back svg{width:12px;height:12px;position:absolute;top:calc(50% - 6px);right:calc(50% - 6px)}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{width:66%;margin:0 2%;font-weight:700}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view span{vertical-align:sub}.datepicker-outer-container .datepicker-inner-container .days-container .day-col{display:inline-block;vertical-align:top;width:14.2857142857%;padding:1px}.datepicker-outer-container .datepicker-inner-container .days-container .day-col .dp-btn{display:flex;flex-direction:column;justify-content:center;align-items:center;min-height:24px}.datepicker-outer-container .datepicker-inner-container .days-container .week-days .day-col{font-weight:700}.datepicker-outer-container .datepicker-inner-container .days-container .month-days .day-col{cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row{display:inline-block;vertical-align:top;width:33.3333333333%;padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row .dp-btn{display:flex;flex-direction:column;justify-content:center;align-content:center;min-height:36px}.datepicker-outer-container .datepicker-inner-container .time-container{border-top-width:1px;border-top-style:solid;border-bottom-width:1px;border-bottom-style:solid;height:82px;direction:ltr;display:flex;flex-direction:row;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col{flex:1;height:100%;overflow:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item{padding:1px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:first-of-type{padding-top:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:last-of-type{padding-bottom:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item .dp-btn{min-height:24px;display:flex;flex-direction:column;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col.meridian-col{display:flex;flex-direction:column;justify-content:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox{text-align:right}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item{display:inline-block;vertical-align:top;min-width:40px;cursor:pointer;font-weight:700;padding:3px 5px;margin-left:5px;text-align:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item:last-child{margin-left:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _formControlDirective: [{
                type: ContentChild,
                args: [FormControlDirective, { static: false }]
            }], _formControlName: [{
                type: ContentChild,
                args: [FormControlName, { static: false }]
            }], dateInitValue: [{
                type: Input
            }], dateIsGregorian: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], dateGregorianFormat: [{
                type: Input
            }], dateMin: [{
                type: Input
            }], dateMax: [{
                type: Input
            }], _timeEnable: [{
                type: Input,
                args: ['timeEnable']
            }], _timeShowSecond: [{
                type: Input,
                args: ['timeShowSecond']
            }], _timeMeridian: [{
                type: Input,
                args: ['timeMeridian']
            }], uiTheme: [{
                type: Input
            }], uiIsVisible: [{
                type: Input
            }], uiHideOnOutsideClick: [{
                type: Input
            }], uiHideAfterSelectDate: [{
                type: Input
            }], _uiYearView: [{
                type: Input,
                args: ['uiYearView']
            }], _uiMonthView: [{
                type: Input,
                args: ['uiMonthView']
            }], uiInitViewMode: [{
                type: Input
            }], uiTodayBtnEnable: [{
                type: Input
            }], dateOnInit: [{
                type: Output
            }], dateOnSelect: [{
                type: Output
            }], uiIsVisibleChange: [{
                type: Output
            }], onInsideClick: [{
                type: HostListener,
                args: ['click']
            }], onOutsideClick: [{
                type: HostListener,
                args: ['document:click']
            }] } });

class NgPersianDatepickerModule {
}
NgPersianDatepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgPersianDatepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerModule, declarations: [NgPersianDatepickerComponent,
        MonthPipe], imports: [CommonModule], exports: [NgPersianDatepickerComponent] });
NgPersianDatepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerModule, imports: [[
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NgPersianDatepickerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        NgPersianDatepickerComponent,
                        MonthPipe
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        NgPersianDatepickerComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of ng-persian-datepicker
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgPersianDatepickerComponent, NgPersianDatepickerModule };
//# sourceMappingURL=ng-persian-datepicker.mjs.map
