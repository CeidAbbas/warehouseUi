import { __awaiter } from "tslib";
import { Directive, Input, ViewContainerRef } from "@angular/core";
import qrcode from "qrcode";
export class QrCodeDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        // tslint:disable-next-line:no-input-rename
        this.errorCorrectionLevel = QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;
        // tslint:disable-next-line:no-input-rename
        this.margin = 16;
    }
    ngOnChanges() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.value) {
                return;
            }
            if (this.version && this.version > 40) {
                console.warn("[qrCode] max version is 40, clamping");
                this.version = 40;
            }
            else if (this.version && this.version < 1) {
                console.warn("[qrCode] min version is 1, clamping");
                this.version = 1;
            }
            else if (this.version !== undefined && isNaN(this.version)) {
                console.warn("[qrCode] version should be set to a number, defaulting to auto");
                this.version = undefined;
            }
            const canvas = this.viewContainerRef.element.nativeElement;
            if (!canvas) {
                // native element not available on server side rendering
                return;
            }
            const context = canvas.getContext("2d");
            if (context) {
                context.clearRect(0, 0, context.canvas.width, context.canvas.height);
            }
            const errorCorrectionLevel = (_a = this.errorCorrectionLevel) !== null && _a !== void 0 ? _a : QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;
            yield qrcode
                .toCanvas(canvas, this.value, {
                version: this.version,
                errorCorrectionLevel,
                width: this.width,
                margin: this.margin,
            });
            const centerImageSrc = this.centerImageSrc;
            const centerImageWidth = getIntOrDefault(this.centerImageWidth, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);
            const centerImageHeight = getIntOrDefault(this.centerImageHeight, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);
            if (centerImageSrc && context) {
                if (!this.centerImage) {
                    this.centerImage = new Image(centerImageWidth, centerImageHeight);
                }
                if (centerImageSrc !== ((_b = this.centerImage) === null || _b === void 0 ? void 0 : _b.src)) {
                    this.centerImage.src = centerImageSrc;
                }
                if (centerImageWidth !== this.centerImage.width) {
                    this.centerImage.width = centerImageWidth;
                }
                if (centerImageHeight !== this.centerImage.height) {
                    this.centerImage.height = centerImageHeight;
                }
                const centerImage = this.centerImage;
                centerImage.onload = () => {
                    context.drawImage(centerImage, canvas.width / 2 - centerImageWidth / 2, canvas.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);
                };
            }
        });
    }
}
QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL = "M";
QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE = 40;
QrCodeDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: `canvas[qrCode]`,
            },] }
];
QrCodeDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
QrCodeDirective.propDecorators = {
    value: [{ type: Input, args: ["qrCode",] }],
    version: [{ type: Input, args: ["qrCodeVersion",] }],
    errorCorrectionLevel: [{ type: Input, args: ["qrCodeErrorCorrectionLevel",] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    centerImageSrc: [{ type: Input, args: ["qrCodeCenterImageSrc",] }],
    centerImageWidth: [{ type: Input, args: ["qrCodeCenterImageWidth",] }],
    centerImageHeight: [{ type: Input, args: ["qrCodeCenterImageHeight",] }],
    margin: [{ type: Input, args: ["qrCodeMargin",] }]
};
function getIntOrDefault(value, defaultValue) {
    if (value === undefined || value === "") {
        return defaultValue;
    }
    if (typeof value === "string") {
        return parseInt(value, 10);
    }
    return value;
}
//# sourceMappingURL=data:application/json;base64,