{"ast":null,"code":"var y = Object.defineProperty;\nvar I = Object.getOwnPropertyDescriptor;\nvar S = Object.getOwnPropertyNames;\nvar H = Object.prototype.hasOwnProperty;\nvar O = (a, e) => {\n    for (var t in e) y(a, t, {\n      get: e[t],\n      enumerable: !0\n    });\n  },\n  L = (a, e, t, r) => {\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let n of S(e)) !H.call(a, n) && n !== t && y(a, n, {\n      get: () => e[n],\n      enumerable: !(r = I(e, n)) || r.enumerable\n    });\n    return a;\n  };\nvar Z = a => L(y({}, \"__esModule\", {\n  value: !0\n}), a);\nvar N = {};\nO(N, {\n  Jalali: () => f,\n  Utils: () => m\n});\nmodule.exports = Z(N);\nvar m = class {\n  static toJalali(e, t, r) {\n    let n = e instanceof Date ? e : null,\n      s = n ? n.getFullYear() : e,\n      i = n ? n.getMonth() + 1 : t,\n      u = n ? n.getDate() : r,\n      o = this.gregorianToJulian(s, i, u);\n    return this.julianToJalali(o);\n  }\n  static toGregorian(e, t, r) {\n    let n = this.jalaliToJulian(e, t, r);\n    return this.julianToGregorian(n);\n  }\n  static isValid(e, t, r, n = 0, s = 0, i = 0, u = 0) {\n    return e >= -61 && e <= 3177 && t >= 1 && t <= 12 && r >= 1 && r <= this.monthLength(e, t) && n >= 0 && n <= 23 && s >= 0 || s <= 59 && i >= 0 || i <= 59 && u >= 0 || u <= 999;\n  }\n  static isLeapYear(e) {\n    return this.calculateLeap(e) === 0;\n  }\n  static monthLength(e, t) {\n    return t <= 6 ? 31 : t <= 11 || this.isLeapYear(e) ? 30 : 29;\n  }\n  static calculateLeap(e, t) {\n    let r = this.breaks.length,\n      n = t ? t.jp : this.breaks[0],\n      s = t ? t.jump : 0;\n    if (!t) {\n      if (e < n || e >= this.breaks[r - 1]) throw new Error(`Invalid Jalali year ${e}`);\n      for (let o = 1; o < r; o++) {\n        let l = this.breaks[o];\n        if (s = l - n, e < l) break;\n        n = l;\n      }\n    }\n    let i = e - n;\n    s - i < 6 && (i = i - s + this.div(s + 4, 33) * 33);\n    let u = this.mod(this.mod(i + 1, 33) - 1, 4);\n    return u === -1 && (u = 4), u;\n  }\n  static calculateJalali(e, t = !0) {\n    let r = this.breaks.length,\n      n = e + 621,\n      s = -14,\n      i = this.breaks[0];\n    if (e < i || e >= this.breaks[r - 1]) throw new Error(`Invalid Jalali year ${e}`);\n    let u = 0;\n    for (let d = 1; d < r; d++) {\n      let c = this.breaks[d];\n      if (u = c - i, e < c) break;\n      s = s + this.div(u, 33) * 8 + this.div(this.mod(u, 33), 4), i = c;\n    }\n    let o = e - i;\n    s = s + this.div(o, 33) * 8 + this.div(this.mod(o, 33) + 3, 4), this.mod(u, 33) === 4 && u - o === 4 && (s += 1);\n    let l = this.div(n, 4) - this.div((this.div(n, 100) + 1) * 3, 4) - 150,\n      p = 20 + s - l;\n    return {\n      gregorianYear: n,\n      march: p,\n      leap: t ? this.calculateLeap(e, {\n        jp: i,\n        jump: u\n      }) : -1\n    };\n  }\n  static jalaliToJulian(e, t, r) {\n    let n = this.calculateJalali(e, !1);\n    return this.gregorianToJulian(n.gregorianYear, 3, n.march) + (t - 1) * 31 - this.div(t, 7) * (t - 7) + r - 1;\n  }\n  static julianToJalali(e) {\n    let t = this.julianToGregorian(e),\n      r = t.year - 621,\n      n = this.calculateJalali(r),\n      s = this.gregorianToJulian(t.year, 3, n.march),\n      i = e - s;\n    if (i >= 0) {\n      if (i <= 185) return {\n        year: r,\n        month: 1 + this.div(i, 31),\n        date: this.mod(i, 31) + 1\n      };\n      i -= 186;\n    } else r -= 1, i += 179, n.leap === 1 && (i += 1);\n    return {\n      year: r,\n      month: 7 + this.div(i, 30),\n      date: this.mod(i, 30) + 1\n    };\n  }\n  static gregorianToJulian(e, t, r) {\n    return this.div((e + this.div(t - 8, 6) + 100100) * 1461, 4) + this.div(153 * this.mod(t + 9, 12) + 2, 5) + r - 34840408 - this.div(this.div(e + 100100 + this.div(t - 8, 6), 100) * 3, 4) + 752;\n  }\n  static julianToGregorian(e) {\n    let t = 4 * e + 139361631;\n    t = t + this.div(this.div(4 * e + 183187720, 146097) * 3, 4) * 4 - 3908;\n    let r = this.div(this.mod(t, 1461), 4) * 5 + 308,\n      n = this.div(this.mod(r, 153), 5) + 1,\n      s = this.mod(this.div(r, 153), 12) + 1;\n    return {\n      year: this.div(t, 1461) - 100100 + this.div(8 - s, 6),\n      month: s,\n      date: n\n    };\n  }\n  static jalaliWeek(e, t, r) {\n    let n = this.toDate(e, t, r).getDay(),\n      s = n === 6 ? 0 : -(n + 1),\n      i = 6 + s;\n    return {\n      saturday: this.julianToJalali(this.jalaliToJulian(e, t, r + s)),\n      friday: this.julianToJalali(this.jalaliToJulian(e, t, r + i))\n    };\n  }\n  static toDate(e, t, r, n = 0, s = 0, i = 0, u = 0) {\n    let o = this.toGregorian(e, t, r);\n    return new Date(o.year, o.month - 1, o.date, n, s, i, u);\n  }\n  static div(e, t) {\n    return ~~(e / t);\n  }\n  static mod(e, t) {\n    return e - ~~(e / t) * t;\n  }\n};\nm.breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\nvar h = a => {\n    let e = m.toJalali(a);\n    return e.month -= 1, e;\n  },\n  D = (a, e, t) => {\n    let r = m.toGregorian(a, e + 1, t);\n    return r.month -= 1, r;\n  },\n  Y = (a, e) => (e = m.mod(e, 12), a += m.div(e, 12), e < 0 && (e += 12, a -= 1), m.monthLength(a, e + 1)),\n  j = a => {\n    let e = new Map();\n    return e.set(\"\\u06F0\", \"0\"), e.set(\"\\u06F1\", \"1\"), e.set(\"\\u06F2\", \"2\"), e.set(\"\\u06F3\", \"3\"), e.set(\"\\u06F4\", \"4\"), e.set(\"\\u06F5\", \"5\"), e.set(\"\\u06F6\", \"6\"), e.set(\"\\u06F7\", \"7\"), e.set(\"\\u06F8\", \"8\"), e.set(\"\\u06F9\", \"9\"), String(a).split(\"\").map(t => e.get(t) ?? t).join(\"\");\n  },\n  v = (a, e) => {\n    let t = null;\n    return String(a).toLowerCase().includes(\"am\") && (t = \"am\"), String(a).toLowerCase().includes(\"pm\") && (t = \"pm\"), t === \"am\" && e === 12 ? 0 : t === \"pm\" && e >= 1 && e <= 11 ? e + 12 : t !== null && e > 12 ? -1 : e;\n  },\n  k = a => a.length === 1 ? Number(a) * 100 : a.length === 2 ? Number(a) * 10 : a.length > 3 ? -1 : Number(a),\n  g = (a, e = 2) => String(a).padStart(e, \"0\"),\n  w = a => {\n    throw new Error(`Invalid: ${a}`);\n  };\nvar b = class {\n    constructor(e = new Date(), t = !0) {\n      this.date = e;\n      if (b.checkTimeZone) {\n        let r = b._timeZone ?? b.defaultTimeZone,\n          n = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        n !== r && (console.warn(`Your system time zone doesn't equal to '${r}', current: ${n}`), console.warn(\"You may getting unexpected results (calculated timestamp)\"));\n      }\n      t || this.date.setMilliseconds(0);\n    }\n    static set timeZone(e) {\n      this._timeZone = e, this.setTimeZone && typeof process == \"object\" && process?.release?.name === \"node\" && (process.env.TZ = e);\n    }\n    static parse(e, t = !0) {\n      let r = j(e),\n        n = r.match(/\\d\\d?\\d?\\d?/g) || [],\n        s = new Array(7).fill(\"0\"),\n        [i, u, o, l, p, d, c] = [...n, ...s].slice(0, 7).map((J, T) => {\n          let M = Number(J);\n          return T === 3 ? M = v(r, Number(J)) : T === 6 && (M = k(J)), M;\n        });\n      return m.isValid(i, u, o, l, p, d, c) || w(e), new b(m.toDate(i, u, o, l, p, d, c), t);\n    }\n    static gregorian(e, t = !0) {\n      let r = j(e),\n        n = new Date(r);\n      return Number.isNaN(+n) && w(e), new b(n, t);\n    }\n    static timestamp(e, t = !0) {\n      return new b(new Date(e), t);\n    }\n    static now(e = !0) {\n      return new b(new Date(), e);\n    }\n    clone(e = !0) {\n      return b.timestamp(+this, e);\n    }\n    valueOf() {\n      return +this.date;\n    }\n    toString() {\n      return this.format();\n    }\n    getFullYear() {\n      return h(this.date).year;\n    }\n    getMonth() {\n      return h(this.date).month;\n    }\n    getDate() {\n      return h(this.date).date;\n    }\n    getHours() {\n      return this.date.getHours();\n    }\n    getMinutes() {\n      return this.date.getMinutes();\n    }\n    getSeconds() {\n      return this.date.getSeconds();\n    }\n    getMilliseconds() {\n      return this.date.getMilliseconds();\n    }\n    setFullYear(e) {\n      let t = h(this.date),\n        r = Math.min(t.date, Y(e, t.month)),\n        n = D(e, t.month, r);\n      return this.update(n), this;\n    }\n    setMonth(e) {\n      let t = h(this.date),\n        r = Math.min(t.date, Y(t.year, e));\n      this.setFullYear(t.year + m.div(e, 12)), e = m.mod(e, 12), e < 0 && (e += 12, this.add(-1, \"year\"));\n      let n = D(this.getFullYear(), e, r);\n      return this.update(n), this;\n    }\n    setDate(e) {\n      let t = h(this.date),\n        r = D(t.year, t.month, e);\n      return this.update(r), this;\n    }\n    setHours(e) {\n      return this.date.setHours(e), this;\n    }\n    setMinutes(e) {\n      return this.date.setMinutes(e), this;\n    }\n    setSeconds(e) {\n      return this.date.setSeconds(e), this;\n    }\n    setMilliseconds(e) {\n      return this.date.setMilliseconds(e), this;\n    }\n    isLeapYear() {\n      return m.isLeapYear(h(this.date).year);\n    }\n    monthLength() {\n      let e = h(this.date);\n      return Y(e.year, e.month);\n    }\n    add(e, t) {\n      switch (t) {\n        case \"year\":\n          this.setFullYear(this.getFullYear() + e);\n          break;\n        case \"month\":\n          this.setMonth(this.getMonth() + e);\n          break;\n        case \"week\":\n          this.date.setDate(this.date.getDate() + e * 7);\n          break;\n        case \"day\":\n          this.date.setDate(this.date.getDate() + e);\n          break;\n      }\n      return this;\n    }\n    startOf(e) {\n      if (e === \"year\" && this.setMonth(0), (e === \"year\" || e === \"month\") && this.setDate(1), e === \"week\") {\n        let t = this.date.getDay(),\n          r = this.date.getDate() - (t === 6 ? 0 : this.date.getDay() + 1);\n        this.date.setDate(r);\n      }\n      return this.setHours(0).setMinutes(0).setSeconds(0).setMilliseconds(0), this;\n    }\n    endOf(e) {\n      return this.startOf(e).add(1, e).setMilliseconds(-1), this;\n    }\n    dayOfYear(e) {\n      let t = this.clone(),\n        r = +t.startOf(\"day\"),\n        n = +t.startOf(\"year\"),\n        s = Math.round((r - n) / 864e5) + 1;\n      return e === void 0 ? s : (this.add(e - s, \"day\"), this);\n    }\n    format(e = \"YYYY/MM/DD HH:mm:ss\", t = !1) {\n      let r = String(e),\n        n = t ? this.date : this,\n        s = n.getFullYear(),\n        i = n.getMonth() + 1,\n        u = n.getDate(),\n        o = n.getHours(),\n        l = n.getMinutes(),\n        p = n.getSeconds(),\n        d = n.getMilliseconds();\n      if (e.includes(\"YYYY\") && (r = r.replace(\"YYYY\", String(s))), e.includes(\"MM\") && (r = r.replace(\"MM\", g(i))), e.includes(\"DD\") && (r = r.replace(\"DD\", g(u))), e.includes(\"HH\") && (r = r.replace(\"HH\", g(o))), e.includes(\"mm\") && (r = r.replace(\"mm\", g(l))), e.includes(\"ss\") && (r = r.replace(\"ss\", g(p))), e.includes(\"SSS\") && (r = r.replace(\"SSS\", g(d, 3))), e.includes(\"hh\")) {\n        let c = o >= 12 ? \"pm\" : \"am\";\n        e.includes(\"a\") && (r = r.replace(\"a\", c)), e.includes(\"A\") && (r = r.replace(\"A\", c.toUpperCase())), o === 0 && (o = 12), o >= 13 && o <= 23 && (o -= 12), r = r.replace(\"hh\", g(o));\n      }\n      return r;\n    }\n    gregorian(e = \"YYYY-MM-DD HH:mm:ss\") {\n      return this.format(e, !0);\n    }\n    update(e) {\n      this.date = new Date(e.year, e.month, e.date, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());\n    }\n  },\n  f = b;\nf.checkTimeZone = !0, f.setTimeZone = !0, f.defaultTimeZone = \"Asia/Tehran\";\n0 && (module.exports = {\n  Jalali,\n  Utils\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}