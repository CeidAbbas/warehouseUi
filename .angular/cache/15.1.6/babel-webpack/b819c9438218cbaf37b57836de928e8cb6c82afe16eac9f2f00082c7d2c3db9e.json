{"ast":null,"code":"import { BaseService } from '../general/service/base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WareService extends BaseService {\n  constructor(httpClient) {\n    super();\n    this.httpClient = httpClient;\n    this.wareUrl = this.baseUrl + 'rest/ware';\n  }\n  getAllWare() {\n    return this.httpClient.get(`${this.wareUrl}/getAll`);\n  }\n  loadWare(wareId) {\n    return this.httpClient.get(`${this.wareUrl}/load/${wareId}`);\n  }\n  // tslint:disable-next-line:ban-types\n  saveWare(ware) {\n    return this.httpClient.post(`${this.wareUrl}/save`, ware);\n  }\n  deleteWare(ware) {\n    return this.httpClient.delete(`${this.wareUrl}/delete/${ware.id}`);\n  }\n  getAllBaseInformation() {\n    return this.httpClient.get(`${this.baseUrl}rest/baseInformation/getAll`);\n  }\n}\nWareService.ɵfac = function WareService_Factory(t) {\n  return new (t || WareService)(i0.ɵɵinject(i1.HttpClient));\n};\nWareService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WareService,\n  factory: WareService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAAQA,WAAW,QAAO,iCAAiC;;;AAK3D,OAAM,MAAOC,WAAY,SAAQD,WAAW;EAI1CE,YAAoBC,UAAsB;IACxC,KAAK,EAAE;IADW,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,IAAI,CAACC,OAAO,GAAG,WAAW;EAI5C;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAS,GAAG,IAAI,CAACC,OAAO,SAAS,CAAC;EAC9D;EAEAC,QAAQ,CAACC,MAAc;IACrB,OAAO,IAAI,CAACN,UAAU,CAACG,GAAG,CAAO,GAAG,IAAI,CAACC,OAAO,SAASE,MAAM,EAAE,CAAC;EACpE;EAEA;EACAC,QAAQ,CAACC,IAAU;IACjB,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,OAAO,EAAEI,IAAI,CAAC;EAC3D;EAEAE,UAAU,CAACF,IAAU;IACnB,OAAO,IAAI,CAACR,UAAU,CAACW,MAAM,CAAC,GAAG,IAAI,CAACP,OAAO,WAAWI,IAAI,CAACI,EAAE,EAAE,CAAC;EACpE;EAEAC,qBAAqB;IACnB,OAAO,IAAI,CAACb,UAAU,CAACG,GAAG,CAAoB,GAAG,IAAI,CAACF,OAAO,6BAA6B,CAAC;EAC7F;;AA3BWH,WAAY;mBAAZA,WAAW;AAAA;AAAXA,WAAY;SAAZA,WAAW;EAAAgB,SAAXhB,WAAW;EAAAiB,YAFV;AAAM","names":["BaseService","WareService","constructor","httpClient","baseUrl","getAllWare","get","wareUrl","loadWare","wareId","saveWare","ware","post","deleteWare","delete","id","getAllBaseInformation","factory","providedIn"],"sourceRoot":"","sources":["D:\\wamp64\\www\\warehouseMicroService\\warehouseUi0\\src\\app\\ware\\ware.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Ware} from './ware';\r\nimport {BaseInformation} from '../general/reference/base-information/base-information';\r\nimport {BaseService} from '../general/service/base.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WareService extends BaseService {\r\n\r\n  private wareUrl = this.baseUrl + 'rest/ware';\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getAllWare(): Observable<Ware[]> {\r\n    return this.httpClient.get<Ware[]>(`${this.wareUrl}/getAll`);\r\n  }\r\n\r\n  loadWare(wareId: string): Observable<Ware> {\r\n    return this.httpClient.get<Ware>(`${this.wareUrl}/load/${wareId}`);\r\n  }\r\n\r\n  // tslint:disable-next-line:ban-types\r\n  saveWare(ware: Ware): Observable<Object> {\r\n    return this.httpClient.post(`${this.wareUrl}/save`, ware);\r\n  }\r\n\r\n  deleteWare(ware: Ware): Observable<any> {\r\n    return this.httpClient.delete(`${this.wareUrl}/delete/${ware.id}`);\r\n  }\r\n\r\n  getAllBaseInformation(): Observable<BaseInformation[]> {\r\n    return this.httpClient.get<BaseInformation[]>(`${this.baseUrl}rest/baseInformation/getAll`);\r\n  }\r\n  // getBaseInformationById(baseInformationId: string): Observable<BaseInformation[]> {\r\n  //   return this.httpClient.get<BaseInformation[]>(`${this.baseUrl}rest/baseInformation/getBaseInformationById`);\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}