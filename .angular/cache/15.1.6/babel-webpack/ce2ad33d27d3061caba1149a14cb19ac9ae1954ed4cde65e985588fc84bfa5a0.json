{"ast":null,"code":"import { BaseService } from '../../service/base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BaseInformationService extends BaseService {\n  constructor(httpClient) {\n    super();\n    this.httpClient = httpClient;\n    this.baseInformationUrl = this.baseUrl + 'rest/baseInformation';\n  }\n  getAllBaseInformation() {\n    return this.httpClient.get(`${this.baseInformationUrl}/getAll`);\n  }\n  loadBaseInformation(baseInformationId) {\n    return this.httpClient.get(`${this.baseInformationUrl}/load/${baseInformationId}`);\n  }\n  saveBaseInformation(baseInformation, parent) {\n    return this.httpClient.post(`${this.baseInformationUrl}/save/${parent}`, baseInformation);\n  }\n  deleteBaseInformation(baseInformation) {\n    return this.httpClient.delete(`${this.baseInformationUrl}/delete/${baseInformation.id}`);\n  }\n  getFiles() {\n    return this.httpClient.get('assets/files.json').toPromise().then(res => res.data);\n  }\n}\nBaseInformationService.ɵfac = function BaseInformationService_Factory(t) {\n  return new (t || BaseInformationService)(i0.ɵɵinject(i1.HttpClient));\n};\nBaseInformationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BaseInformationService,\n  factory: BaseInformationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAQA,WAAW,QAAO,4BAA4B;;;AAMtD,OAAM,MAAOC,sBAAuB,SAAQD,WAAW;EAIrDE,YAAoBC,UAAsB;IACxC,KAAK,EAAE;IADW,eAAU,GAAVA,UAAU;IAFtB,uBAAkB,GAAG,IAAI,CAACC,OAAO,GAAG,sBAAsB;EAIlE;EAEAC,qBAAqB;IACnB,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAoB,GAAG,IAAI,CAACC,kBAAkB,SAAS,CAAC;EACpF;EAEAC,mBAAmB,CAACC,iBAAyB;IAC3C,OAAO,IAAI,CAACN,UAAU,CAACG,GAAG,CAAkB,GAAG,IAAI,CAACC,kBAAkB,SAASE,iBAAiB,EAAE,CAAC;EACrG;EAEAC,mBAAmB,CAACC,eAAgC,EAAEC,MAAc;IAClE,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAAC,GAAG,IAAI,CAACN,kBAAkB,SAASK,MAAM,EAAE,EAAED,eAAe,CAAC;EAC3F;EAEAG,qBAAqB,CAACH,eAAgC;IACpD,OAAO,IAAI,CAACR,UAAU,CAACY,MAAM,CAAC,GAAG,IAAI,CAACR,kBAAkB,WAAWI,eAAe,CAACK,EAAE,EAAE,CAAC;EAC1F;EAEAC,QAAQ;IACN,OAAO,IAAI,CAACd,UAAU,CAACG,GAAG,CAAM,mBAAmB,CAAC,CACjDY,SAAS,EAAE,CACXC,IAAI,CAACC,GAAG,IAAgBA,GAAG,CAACC,IAAI,CAAC;EACtC;;AA5BWpB,sBAAuB;mBAAvBA,sBAAsB;AAAA;AAAtBA,sBAAuB;SAAvBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;EAAAsB,YAFrB;AAAM","names":["BaseService","BaseInformationService","constructor","httpClient","baseUrl","getAllBaseInformation","get","baseInformationUrl","loadBaseInformation","baseInformationId","saveBaseInformation","baseInformation","parent","post","deleteBaseInformation","delete","id","getFiles","toPromise","then","res","data","factory","providedIn"],"sourceRoot":"","sources":["D:\\wamp64\\www\\warehouseMicroService\\warehouseUi0\\src\\app\\general\\reference\\base-information\\base-information.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {BaseInformation} from './base-information';\r\nimport {Observable} from 'rxjs';\r\nimport {BaseService} from '../../service/base.service';\r\nimport {TreeNode} from \"primeng/api\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BaseInformationService extends BaseService {\r\n\r\n  private baseInformationUrl = this.baseUrl + 'rest/baseInformation';\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getAllBaseInformation(): Observable<BaseInformation[]> {\r\n    return this.httpClient.get<BaseInformation[]>(`${this.baseInformationUrl}/getAll`);\r\n  }\r\n\r\n  loadBaseInformation(baseInformationId: string): Observable<BaseInformation> {\r\n    return this.httpClient.get<BaseInformation>(`${this.baseInformationUrl}/load/${baseInformationId}`);\r\n  }\r\n\r\n  saveBaseInformation(baseInformation: BaseInformation, parent: string): Observable<BaseInformation> {\r\n    return this.httpClient.post(`${this.baseInformationUrl}/save/${parent}`, baseInformation);\r\n  }\r\n\r\n  deleteBaseInformation(baseInformation: BaseInformation): Observable<any> {\r\n    return this.httpClient.delete(`${this.baseInformationUrl}/delete/${baseInformation.id}`);\r\n  }\r\n\r\n  getFiles(): any {\r\n    return this.httpClient.get<any>('assets/files.json')\r\n      .toPromise()\r\n      .then(res => <TreeNode[]>res.data);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}